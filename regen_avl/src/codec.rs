// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/codec.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct KVKey {
    // message oneof groups
    pub key: ::std::option::Option<KVKey_oneof_key>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KVKey {
    fn default() -> &'a KVKey {
        <KVKey as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum KVKey_oneof_key {
    node_hash__node(::std::vec::Vec<u8>),
    node_hash__ref_count(::std::vec::Vec<u8>),
    commit_hash__commit(::std::vec::Vec<u8>),
    commit_hash__ref_count(::std::vec::Vec<u8>),
    branch_name__commit_hash(::std::vec::Vec<u8>),
}

impl KVKey {
    pub fn new() -> KVKey {
        ::std::default::Default::default()
    }

    // bytes node_hash__node = 1;


    pub fn get_node_hash__node(&self) -> &[u8] {
        match self.key {
            ::std::option::Option::Some(KVKey_oneof_key::node_hash__node(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_node_hash__node(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_node_hash__node(&self) -> bool {
        match self.key {
            ::std::option::Option::Some(KVKey_oneof_key::node_hash__node(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_node_hash__node(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = ::std::option::Option::Some(KVKey_oneof_key::node_hash__node(v))
    }

    // Mutable pointer to the field.
    pub fn mut_node_hash__node(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(KVKey_oneof_key::node_hash__node(_)) = self.key {
        } else {
            self.key = ::std::option::Option::Some(KVKey_oneof_key::node_hash__node(::std::vec::Vec::new()));
        }
        match self.key {
            ::std::option::Option::Some(KVKey_oneof_key::node_hash__node(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_node_hash__node(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_node_hash__node() {
            match self.key.take() {
                ::std::option::Option::Some(KVKey_oneof_key::node_hash__node(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // bytes node_hash__ref_count = 2;


    pub fn get_node_hash__ref_count(&self) -> &[u8] {
        match self.key {
            ::std::option::Option::Some(KVKey_oneof_key::node_hash__ref_count(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_node_hash__ref_count(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_node_hash__ref_count(&self) -> bool {
        match self.key {
            ::std::option::Option::Some(KVKey_oneof_key::node_hash__ref_count(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_node_hash__ref_count(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = ::std::option::Option::Some(KVKey_oneof_key::node_hash__ref_count(v))
    }

    // Mutable pointer to the field.
    pub fn mut_node_hash__ref_count(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(KVKey_oneof_key::node_hash__ref_count(_)) = self.key {
        } else {
            self.key = ::std::option::Option::Some(KVKey_oneof_key::node_hash__ref_count(::std::vec::Vec::new()));
        }
        match self.key {
            ::std::option::Option::Some(KVKey_oneof_key::node_hash__ref_count(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_node_hash__ref_count(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_node_hash__ref_count() {
            match self.key.take() {
                ::std::option::Option::Some(KVKey_oneof_key::node_hash__ref_count(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // bytes commit_hash__commit = 3;


    pub fn get_commit_hash__commit(&self) -> &[u8] {
        match self.key {
            ::std::option::Option::Some(KVKey_oneof_key::commit_hash__commit(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_commit_hash__commit(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_commit_hash__commit(&self) -> bool {
        match self.key {
            ::std::option::Option::Some(KVKey_oneof_key::commit_hash__commit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_commit_hash__commit(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = ::std::option::Option::Some(KVKey_oneof_key::commit_hash__commit(v))
    }

    // Mutable pointer to the field.
    pub fn mut_commit_hash__commit(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(KVKey_oneof_key::commit_hash__commit(_)) = self.key {
        } else {
            self.key = ::std::option::Option::Some(KVKey_oneof_key::commit_hash__commit(::std::vec::Vec::new()));
        }
        match self.key {
            ::std::option::Option::Some(KVKey_oneof_key::commit_hash__commit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_commit_hash__commit(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_commit_hash__commit() {
            match self.key.take() {
                ::std::option::Option::Some(KVKey_oneof_key::commit_hash__commit(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // bytes commit_hash__ref_count = 4;


    pub fn get_commit_hash__ref_count(&self) -> &[u8] {
        match self.key {
            ::std::option::Option::Some(KVKey_oneof_key::commit_hash__ref_count(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_commit_hash__ref_count(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_commit_hash__ref_count(&self) -> bool {
        match self.key {
            ::std::option::Option::Some(KVKey_oneof_key::commit_hash__ref_count(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_commit_hash__ref_count(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = ::std::option::Option::Some(KVKey_oneof_key::commit_hash__ref_count(v))
    }

    // Mutable pointer to the field.
    pub fn mut_commit_hash__ref_count(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(KVKey_oneof_key::commit_hash__ref_count(_)) = self.key {
        } else {
            self.key = ::std::option::Option::Some(KVKey_oneof_key::commit_hash__ref_count(::std::vec::Vec::new()));
        }
        match self.key {
            ::std::option::Option::Some(KVKey_oneof_key::commit_hash__ref_count(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_commit_hash__ref_count(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_commit_hash__ref_count() {
            match self.key.take() {
                ::std::option::Option::Some(KVKey_oneof_key::commit_hash__ref_count(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // bytes branch_name__commit_hash = 5;


    pub fn get_branch_name__commit_hash(&self) -> &[u8] {
        match self.key {
            ::std::option::Option::Some(KVKey_oneof_key::branch_name__commit_hash(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_branch_name__commit_hash(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_branch_name__commit_hash(&self) -> bool {
        match self.key {
            ::std::option::Option::Some(KVKey_oneof_key::branch_name__commit_hash(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_branch_name__commit_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = ::std::option::Option::Some(KVKey_oneof_key::branch_name__commit_hash(v))
    }

    // Mutable pointer to the field.
    pub fn mut_branch_name__commit_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(KVKey_oneof_key::branch_name__commit_hash(_)) = self.key {
        } else {
            self.key = ::std::option::Option::Some(KVKey_oneof_key::branch_name__commit_hash(::std::vec::Vec::new()));
        }
        match self.key {
            ::std::option::Option::Some(KVKey_oneof_key::branch_name__commit_hash(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_branch_name__commit_hash(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_branch_name__commit_hash() {
            match self.key.take() {
                ::std::option::Option::Some(KVKey_oneof_key::branch_name__commit_hash(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }
}

impl ::protobuf::Message for KVKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.key = ::std::option::Option::Some(KVKey_oneof_key::node_hash__node(is.read_bytes()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.key = ::std::option::Option::Some(KVKey_oneof_key::node_hash__ref_count(is.read_bytes()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.key = ::std::option::Option::Some(KVKey_oneof_key::commit_hash__commit(is.read_bytes()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.key = ::std::option::Option::Some(KVKey_oneof_key::commit_hash__ref_count(is.read_bytes()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.key = ::std::option::Option::Some(KVKey_oneof_key::branch_name__commit_hash(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.key {
            match v {
                &KVKey_oneof_key::node_hash__node(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
                &KVKey_oneof_key::node_hash__ref_count(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(2, &v);
                },
                &KVKey_oneof_key::commit_hash__commit(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(3, &v);
                },
                &KVKey_oneof_key::commit_hash__ref_count(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(4, &v);
                },
                &KVKey_oneof_key::branch_name__commit_hash(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(5, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.key {
            match v {
                &KVKey_oneof_key::node_hash__node(ref v) => {
                    os.write_bytes(1, v)?;
                },
                &KVKey_oneof_key::node_hash__ref_count(ref v) => {
                    os.write_bytes(2, v)?;
                },
                &KVKey_oneof_key::commit_hash__commit(ref v) => {
                    os.write_bytes(3, v)?;
                },
                &KVKey_oneof_key::commit_hash__ref_count(ref v) => {
                    os.write_bytes(4, v)?;
                },
                &KVKey_oneof_key::branch_name__commit_hash(ref v) => {
                    os.write_bytes(5, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KVKey {
        KVKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "node_hash__node",
                    KVKey::has_node_hash__node,
                    KVKey::get_node_hash__node,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "node_hash__ref_count",
                    KVKey::has_node_hash__ref_count,
                    KVKey::get_node_hash__ref_count,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "commit_hash__commit",
                    KVKey::has_commit_hash__commit,
                    KVKey::get_commit_hash__commit,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "commit_hash__ref_count",
                    KVKey::has_commit_hash__ref_count,
                    KVKey::get_commit_hash__ref_count,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "branch_name__commit_hash",
                    KVKey::has_branch_name__commit_hash,
                    KVKey::get_branch_name__commit_hash,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<KVKey>(
                    "KVKey",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static KVKey {
        static mut instance: ::protobuf::lazy::Lazy<KVKey> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const KVKey,
        };
        unsafe {
            instance.get(KVKey::new)
        }
    }
}

impl ::protobuf::Clear for KVKey {
    fn clear(&mut self) {
        self.key = ::std::option::Option::None;
        self.key = ::std::option::Option::None;
        self.key = ::std::option::Option::None;
        self.key = ::std::option::Option::None;
        self.key = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KVKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KVKey {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Node {
    // message fields
    pub key: ::std::vec::Vec<u8>,
    pub value: ::std::vec::Vec<u8>,
    pub left: ::std::vec::Vec<u8>,
    pub right: ::std::vec::Vec<u8>,
    pub height: u32,
    pub rank: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Node {
    fn default() -> &'a Node {
        <Node as ::protobuf::Message>::default_instance()
    }
}

impl Node {
    pub fn new() -> Node {
        ::std::default::Default::default()
    }

    // bytes key = 1;


    pub fn get_key(&self) -> &[u8] {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key, ::std::vec::Vec::new())
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }

    // bytes left = 3;


    pub fn get_left(&self) -> &[u8] {
        &self.left
    }
    pub fn clear_left(&mut self) {
        self.left.clear();
    }

    // Param is passed by value, moved
    pub fn set_left(&mut self, v: ::std::vec::Vec<u8>) {
        self.left = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_left(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.left
    }

    // Take field
    pub fn take_left(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.left, ::std::vec::Vec::new())
    }

    // bytes right = 4;


    pub fn get_right(&self) -> &[u8] {
        &self.right
    }
    pub fn clear_right(&mut self) {
        self.right.clear();
    }

    // Param is passed by value, moved
    pub fn set_right(&mut self, v: ::std::vec::Vec<u8>) {
        self.right = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_right(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.right
    }

    // Take field
    pub fn take_right(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.right, ::std::vec::Vec::new())
    }

    // uint32 height = 5;


    pub fn get_height(&self) -> u32 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u32) {
        self.height = v;
    }

    // uint64 rank = 6;


    pub fn get_rank(&self) -> u64 {
        self.rank
    }
    pub fn clear_rank(&mut self) {
        self.rank = 0;
    }

    // Param is passed by value, moved
    pub fn set_rank(&mut self, v: u64) {
        self.rank = v;
    }
}

impl ::protobuf::Message for Node {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.left)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.right)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.height = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.rank = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        if !self.left.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.left);
        }
        if !self.right.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.right);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(5, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rank != 0 {
            my_size += ::protobuf::rt::value_size(6, self.rank, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        if !self.left.is_empty() {
            os.write_bytes(3, &self.left)?;
        }
        if !self.right.is_empty() {
            os.write_bytes(4, &self.right)?;
        }
        if self.height != 0 {
            os.write_uint32(5, self.height)?;
        }
        if self.rank != 0 {
            os.write_uint64(6, self.rank)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Node {
        Node::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "key",
                    |m: &Node| { &m.key },
                    |m: &mut Node| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &Node| { &m.value },
                    |m: &mut Node| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "left",
                    |m: &Node| { &m.left },
                    |m: &mut Node| { &mut m.left },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "right",
                    |m: &Node| { &m.right },
                    |m: &mut Node| { &mut m.right },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "height",
                    |m: &Node| { &m.height },
                    |m: &mut Node| { &mut m.height },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "rank",
                    |m: &Node| { &m.rank },
                    |m: &mut Node| { &mut m.rank },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Node>(
                    "Node",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Node {
        static mut instance: ::protobuf::lazy::Lazy<Node> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Node,
        };
        unsafe {
            instance.get(Node::new)
        }
    }
}

impl ::protobuf::Clear for Node {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.left.clear();
        self.right.clear();
        self.height = 0;
        self.rank = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Node {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Node {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Commit {
    // message fields
    pub parent_commit_hash: ::std::vec::Vec<u8>,
    pub root_node_hash: ::std::vec::Vec<u8>,
    pub height: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Commit {
    fn default() -> &'a Commit {
        <Commit as ::protobuf::Message>::default_instance()
    }
}

impl Commit {
    pub fn new() -> Commit {
        ::std::default::Default::default()
    }

    // bytes parent_commit_hash = 1;


    pub fn get_parent_commit_hash(&self) -> &[u8] {
        &self.parent_commit_hash
    }
    pub fn clear_parent_commit_hash(&mut self) {
        self.parent_commit_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent_commit_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.parent_commit_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent_commit_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.parent_commit_hash
    }

    // Take field
    pub fn take_parent_commit_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.parent_commit_hash, ::std::vec::Vec::new())
    }

    // bytes root_node_hash = 2;


    pub fn get_root_node_hash(&self) -> &[u8] {
        &self.root_node_hash
    }
    pub fn clear_root_node_hash(&mut self) {
        self.root_node_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_root_node_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.root_node_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_root_node_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.root_node_hash
    }

    // Take field
    pub fn take_root_node_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.root_node_hash, ::std::vec::Vec::new())
    }

    // uint64 height = 3;


    pub fn get_height(&self) -> u64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }
}

impl ::protobuf::Message for Commit {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.parent_commit_hash)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.root_node_hash)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent_commit_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.parent_commit_hash);
        }
        if !self.root_node_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.root_node_hash);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent_commit_hash.is_empty() {
            os.write_bytes(1, &self.parent_commit_hash)?;
        }
        if !self.root_node_hash.is_empty() {
            os.write_bytes(2, &self.root_node_hash)?;
        }
        if self.height != 0 {
            os.write_uint64(3, self.height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Commit {
        Commit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "parent_commit_hash",
                    |m: &Commit| { &m.parent_commit_hash },
                    |m: &mut Commit| { &mut m.parent_commit_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "root_node_hash",
                    |m: &Commit| { &m.root_node_hash },
                    |m: &mut Commit| { &mut m.root_node_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "height",
                    |m: &Commit| { &m.height },
                    |m: &mut Commit| { &mut m.height },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Commit>(
                    "Commit",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Commit {
        static mut instance: ::protobuf::lazy::Lazy<Commit> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Commit,
        };
        unsafe {
            instance.get(Commit::new)
        }
    }
}

impl ::protobuf::Clear for Commit {
    fn clear(&mut self) {
        self.parent_commit_hash.clear();
        self.root_node_hash.clear();
        self.height = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Commit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Commit {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fsrc/codec.proto\x12\tregen_avl\"\x8a\x02\n\x05KVKey\x12'\n\x0fnode\
    _hash__node\x18\x01\x20\x01(\x0cH\0R\x0cnodeHashNode\x120\n\x14node_hash\
    __ref_count\x18\x02\x20\x01(\x0cH\0R\x10nodeHashRefCount\x12/\n\x13commi\
    t_hash__commit\x18\x03\x20\x01(\x0cH\0R\x10commitHashCommit\x124\n\x16co\
    mmit_hash__ref_count\x18\x04\x20\x01(\x0cH\0R\x12commitHashRefCount\x128\
    \n\x18branch_name__commit_hash\x18\x05\x20\x01(\x0cH\0R\x14branchNameCom\
    mitHashB\x05\n\x03key\"\x84\x01\n\x04Node\x12\x10\n\x03key\x18\x01\x20\
    \x01(\x0cR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05value\x12\
    \x12\n\x04left\x18\x03\x20\x01(\x0cR\x04left\x12\x14\n\x05right\x18\x04\
    \x20\x01(\x0cR\x05right\x12\x16\n\x06height\x18\x05\x20\x01(\rR\x06heigh\
    t\x12\x12\n\x04rank\x18\x06\x20\x01(\x04R\x04rank\"t\n\x06Commit\x12,\n\
    \x12parent_commit_hash\x18\x01\x20\x01(\x0cR\x10parentCommitHash\x12$\n\
    \x0eroot_node_hash\x18\x02\x20\x01(\x0cR\x0crootNodeHash\x12\x16\n\x06he\
    ight\x18\x03\x20\x01(\x04R\x06heightb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
